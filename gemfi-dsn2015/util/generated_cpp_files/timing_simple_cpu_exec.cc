
/*
 * DO NOT EDIT THIS FILE!!!
 *
 * It was automatically generated from the ISA description in alpha/isa/main.isa
 */

#include "decoder.hh"
#include "cpu/simple/timing.hh"


#include <cmath>

#include "arch/alpha/decoder.hh"
#include "arch/alpha/registers.hh"
#include "arch/alpha/regredir.hh"
#include "arch/generic/memhelpers.hh"
#include "base/cp_annotate.hh"
#include "base/fenv.hh"
#include "config/ss_compatible_fp.hh"
#include "cpu/base.hh"
#include "cpu/exetrace.hh"
#include "mem/packet.hh"
#include "mem/packet_access.hh"
#include "sim/full_system.hh"
#include "sim/pseudo_inst.hh"
#include "sim/sim_exit.hh"


//ALTERCODE
#include "fi/fi_system.hh"
//~ALTERCODE

using namespace AlphaISA;


namespace AlphaISAInst {


    Fault
    Nop::execute(TimingSimpleCPU *, Trace::InstRecord *) const
    {
        return NoFault;
    }

    /// Check "FP enabled" machine status bit.  Called when executing any FP
    /// instruction in full-system mode.
    /// @retval Full-system mode: NoFault if FP is enabled, FenFault
    /// if not.  Non-full-system mode: always returns NoFault.
    inline Fault checkFpEnableFault(TimingSimpleCPU *xc)
    {
        Fault fault = NoFault;  // dummy... this ipr access should not fault
        if (FullSystem && !ICSR_FPE(xc->readMiscReg(IPR_ICSR))) {
            fault = new FloatEnableFault;
        }
        return fault;
    }

    Fault
    OpcdecFault::execute(TimingSimpleCPU *xc,
                     Trace::InstRecord *traceData) const
    {
        return new UnimplementedOpcodeFault;
    }

    Fault
    FailUnimplemented::execute(TimingSimpleCPU *xc,
                               Trace::InstRecord *traceData) const
    {
        panic("attempt to execute unimplemented instruction '%s' "
              "(inst 0x%08x, opcode 0x%x)", mnemonic, machInst, OPCODE);
        return new UnimplementedOpcodeFault;
    }

    Fault
    WarnUnimplemented::execute(TimingSimpleCPU *xc,
                               Trace::InstRecord *traceData) const
    {
        if (!warned) {
            warn("instruction '%s' unimplemented\n", mnemonic);
            warned = true;
        }

        return NoFault;
    }

    Fault
    Unknown::execute(TimingSimpleCPU *xc,
                     Trace::InstRecord *traceData) const
    {
        panic("attempt to execute unknown instruction "
              "(inst 0x%08x, opcode 0x%x)", machInst, OPCODE);
        return new UnimplementedOpcodeFault;
    }


    /// Return opa + opb, summing carry into third arg.
    inline uint64_t
    addc(uint64_t opa, uint64_t opb, int &carry)
    {
        uint64_t res = opa + opb;
        if (res < opa || res < opb)
            ++carry;
        return res;
    }

    /// Multiply two 64-bit values (opa * opb), returning the 128-bit
    /// product in res_hi and res_lo.
    inline void
    mul128(uint64_t opa, uint64_t opb, uint64_t &res_hi, uint64_t &res_lo)
    {
        // do a 64x64 --> 128 multiply using four 32x32 --> 64 multiplies
        uint64_t opa_hi = bits(opa, 63, 32);
        uint64_t opa_lo = bits(opa, 31, 0);
        uint64_t opb_hi = bits(opb, 63, 32);
        uint64_t opb_lo = bits(opb, 31, 0);

        res_lo = opa_lo * opb_lo;

        // The middle partial products logically belong in bit
        // positions 95 to 32.  Thus the lower 32 bits of each product
        // sum into the upper 32 bits of the low result, while the
        // upper 32 sum into the low 32 bits of the upper result.
        uint64_t partial1 = opa_hi * opb_lo;
        uint64_t partial2 = opa_lo * opb_hi;

        uint64_t partial1_lo = bits(partial1, 31, 0) << 32;
        uint64_t partial1_hi = bits(partial1, 63, 32);
        uint64_t partial2_lo = bits(partial2, 31, 0) << 32;
        uint64_t partial2_hi = bits(partial2, 63, 32);

        // Add partial1_lo and partial2_lo to res_lo, keeping track
        // of any carries out
        int carry_out = 0;
        res_lo = addc(partial1_lo, res_lo, carry_out);
        res_lo = addc(partial2_lo, res_lo, carry_out);

        // Now calculate the high 64 bits...
        res_hi = (opa_hi * opb_hi) + partial1_hi + partial2_hi + carry_out;
    }

    /// Map 8-bit S-floating exponent to 11-bit T-floating exponent.
    /// See Table 2-2 of Alpha AHB.
    inline int
    map_s(int old_exp)
    {
        int hibit = bits(old_exp, 7, 7);
        int lobits = bits(old_exp, 6, 0);

        if (hibit == 1) {
            return (lobits == 0x7f) ? 0x7ff : (0x400 | lobits);
        }
        else {
            return (lobits == 0) ? 0 : (0x380 | lobits);
        }
    }

    /// Convert a 32-bit S-floating value to the equivalent 64-bit
    /// representation to be stored in an FP reg.
    inline uint64_t
    s_to_t(uint32_t s_val)
    {
        uint64_t tmp = s_val;
        return (bits(tmp, 31, 31) << 63 // sign bit
                | (uint64_t)map_s(bits(tmp, 30, 23)) << 52 // exponent
                | bits(tmp, 22, 0) << 29); // fraction
    }

    /// Convert a 64-bit T-floating value to the equivalent 32-bit
    /// S-floating representation to be stored in memory.
    inline int32_t
    t_to_s(uint64_t t_val)
    {
        return (bits(t_val, 63, 62) << 30   // sign bit & hi exp bit
                | bits(t_val, 58, 29));     // rest of exp & fraction
    }

// LoadAddress::lda([' uint64_t tmp  = Rb + disp; \n\t\t    if(true){\n\t\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t    }\n\t\t    Ra = tmp;\n\t\n      '],{})

    Fault Lda::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = Rb + disp; 
		    if(true){
			fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		    }
		    Ra = tmp;
	
      ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadAddress::ldah([' uint64_t tmp = Rb + (disp << 16); \n\t\t    if(true){\n\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t    }\n\t\t    Ra=tmp;\n\t\t    '],{})

    Fault Ldah::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Rb + (disp << 16); 
		    if(true){
		      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		    }
		    Ra=tmp;
		    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadOrNop::ldbu([' Ra_uq = Mem_ub; '],{})

    Fault Ldbu::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint8_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldbu::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldbu::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint8_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldbu::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint8_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadOrNop::ldwu([' Ra_uq = Mem_uw; '],{})

    Fault Ldwu::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint16_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldwu::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldwu::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint16_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldwu::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint16_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadOrNop::ldq_u([' Ra = Mem_uq; '],{'ea_code': ' EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); '})

    Fault Ldq_u::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldq_u::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldq_u::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldq_u::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadOrNop::ldt([' Fa = Mem_df; '],{})

    Fault Ldt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t Rb = 0;
double Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Fa = Mem; ;
        }

        if (fault == NoFault) {
            
        {
            double final_val = Fa;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldt::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldt::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
double Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldt::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Fa = Mem; ;
        }

        if (fault == NoFault) {
            
        {
            double final_val = Fa;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadOrNop::ldl_l([' Ra_sl = Mem_sl; '],{'mem_flags': 'LLSC'})

    Fault Ldl_l::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
uint64_t Rb = 0;
int32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldl_l::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldl_l::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
int32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldl_l::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadOrNop::ldq_l([' Ra_uq = Mem_uq; '],{'mem_flags': 'LLSC'})

    Fault Ldq_l::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldq_l::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldq_l::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldq_l::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// LoadOrPrefetch::ldl([' Ra_sl = Mem_sl; '],{})

    Fault Ldl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
uint64_t Rb = 0;
int32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldl::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldl::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
int32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldl::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault LdlPrefetch::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA M5_VAR_USED;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        warn_once("Prefetch instructions in Alpha do not do anything\n");
        if (fault == NoFault) {
            ;;
        }

        return NoFault;
    }

    Fault LdlPrefetch::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault LdlPrefetch::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("initiateAcc undefined: Misc instruction does not support split "
             "access method!");
        return NoFault;
    }

    Fault LdlPrefetch::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("completeAcc undefined: Misc instruction does not support split "
             "access method!");

        return NoFault;
    }

// LoadOrPrefetch::ldq([' Ra_uq = Mem_uq; '],{'pf_flags': 'EVICT_NEXT'})

    Fault Ldq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Ldq::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Ldq::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Ldq::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault LdqPrefetch::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA M5_VAR_USED;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        warn_once("Prefetch instructions in Alpha do not do anything\n");
        if (fault == NoFault) {
            ;;
        }

        return NoFault;
    }

    Fault LdqPrefetch::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault LdqPrefetch::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("initiateAcc undefined: Misc instruction does not support split "
             "access method!");
        return NoFault;
    }

    Fault LdqPrefetch::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("completeAcc undefined: Misc instruction does not support split "
             "access method!");

        return NoFault;
    }

// LoadOrPrefetch::lds([' Fa_uq = s_to_t(Mem_ul); '],{'pf_flags': 'PF_EXCLUSIVE', 'inst_flags': 'IsFloating'})

    Fault Lds::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Fa = s_to_t(Mem); ;
        }

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fa;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Lds::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Lds::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Lds::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint32_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Fa = s_to_t(Mem); ;
        }

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fa;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault LdsPrefetch::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA M5_VAR_USED;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        warn_once("Prefetch instructions in Alpha do not do anything\n");
        if (fault == NoFault) {
            ;;
        }

        return NoFault;
    }

    Fault LdsPrefetch::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb + disp;  if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault LdsPrefetch::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("initiateAcc undefined: Misc instruction does not support split "
             "access method!");
        return NoFault;
    }

    Fault LdsPrefetch::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("completeAcc undefined: Misc instruction does not support split "
             "access method!");

        return NoFault;
    }

// Store::stb([' Mem_ub = Ra<7:0>; '],{})

    Fault Stb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint8_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = bits(Ra, 7, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Stb::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stb::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint8_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = bits(Ra, 7, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stb::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// Store::stw([' Mem_uw = Ra<15:0>; '],{})

    Fault Stw::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint16_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = bits(Ra, 15, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Stw::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stw::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint16_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = bits(Ra, 15, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stw::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// Store::stl([' Mem_ul = Ra<31:0>; '],{})

    Fault Stl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = bits(Ra, 31, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Stl::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stl::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = bits(Ra, 31, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stl::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// Store::stq([' Mem_uq = Ra_uq; '],{})

    Fault Stq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Stq::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stq::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stq::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// Store::stq_u([' Mem_uq = Ra_uq; ', ' EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); '],{})

    Fault Stq_u::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Stq_u::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stq_u::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~7; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stq_u::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// Store::sts([' Mem_ul = t_to_s(Fa_uq); '],{})

    Fault Sts::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = t_to_s(Fa); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Sts::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Sts::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = t_to_s(Fa); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Sts::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// Store::stt([' Mem_df = Fa; '],{})

    Fault Stt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t Rb = 0;
double Mem = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = Fa; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Stt::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stt::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t Rb = 0;
double Mem = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA); ;

        if (fault == NoFault) {
             Mem = Fa; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stt::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// StoreCond::stl_c([' Mem_ul = Ra<31:0>; ', '\n                        uint64_t tmp = write_result;\n                        // see stq_c\n                        Ra = (tmp == 0 || tmp == 1) ? tmp : Ra;\n                        if (tmp == 1) {\n                            xc->setStCondFailures(0);\n                        }\n                    '],{'inst_flags': 'IsStoreConditional', 'mem_flags': 'LLSC'})

    Fault Stl_c::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;
        uint64_t write_result = 0;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
             Mem = bits(Ra, 31, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, &write_result);
        }

        if (fault == NoFault) {
            
                        uint64_t tmp = write_result;
                        // see stq_c
                        Ra = (tmp == 0 || tmp == 1) ? tmp : Ra;
                        if (tmp == 1) {
                            xc->setStCondFailures(0);
                        }
                    ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Stl_c::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stl_c::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
             Mem = bits(Ra, 31, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stl_c::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
;

        uint64_t write_result = pkt->req->getExtraData();

        if (fault == NoFault) {
            
                        uint64_t tmp = write_result;
                        // see stq_c
                        Ra = (tmp == 0 || tmp == 1) ? tmp : Ra;
                        if (tmp == 1) {
                            xc->setStCondFailures(0);
                        }
                    ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// StoreCond::stq_c([' Mem_uq = Ra; ', "\n                        uint64_t tmp = write_result;\n                        // If the write operation returns 0 or 1, then\n                        // this was a conventional store conditional,\n                        // and the value indicates the success/failure\n                        // of the operation.  If another value is\n                        // returned, then this was a Turbolaser\n                        // mailbox access, and we don't update the\n                        // result register at all.\n                        Ra = (tmp == 0 || tmp == 1) ? tmp : Ra;\n                        if (tmp == 1) {\n                            // clear failure counter... this is\n                            // non-architectural and for debugging\n                            // only.\n                            xc->setStCondFailures(0);\n                        }\n                    "],{'inst_flags': 'IsStoreConditional', 'mem_flags': 'LLSC'})

    Fault Stq_c::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;
        uint64_t write_result = 0;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, &write_result);
        }

        if (fault == NoFault) {
            
                        uint64_t tmp = write_result;
                        // If the write operation returns 0 or 1, then
                        // this was a conventional store conditional,
                        // and the value indicates the success/failure
                        // of the operation.  If another value is
                        // returned, then this was a Turbolaser
                        // mailbox access, and we don't update the
                        // result register at all.
                        Ra = (tmp == 0 || tmp == 1) ? tmp : Ra;
                        if (tmp == 1) {
                            // clear failure counter... this is
                            // non-architectural and for debugging
                            // only.
                            xc->setStCondFailures(0);
                        }
                    ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Stq_c::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Stq_c::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = Rb + disp; if(true) fi_system->iew_fault(xc, xc->tcBase(),&EA);;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Stq_c::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
;

        uint64_t write_result = pkt->req->getExtraData();

        if (fault == NoFault) {
            
                        uint64_t tmp = write_result;
                        // If the write operation returns 0 or 1, then
                        // this was a conventional store conditional,
                        // and the value indicates the success/failure
                        // of the operation.  If another value is
                        // returned, then this was a Turbolaser
                        // mailbox access, and we don't update the
                        // result register at all.
                        Ra = (tmp == 0 || tmp == 1) ? tmp : Ra;
                        if (tmp == 1) {
                            // clear failure counter... this is
                            // non-architectural and for debugging
                            // only.
                            xc->setStCondFailures(0);
                        }
                    ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::addl([' int32_t tmp = Ra_sl + Rb_or_imm_sl; \n\t      if(true)\n\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t      Rc_sl = tmp;\n\t'],{})

    Fault Addl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         int32_t tmp = Ra + Rb; 
	      if(true)
		fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	      Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault AddlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         int32_t tmp = Ra + imm; 
	      if(true)
		fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	      Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::addlv(['\n                int32_t tmp  = Ra_sl + Rb_or_imm_sl;\n                // signed overflow occurs when operands have same sign\n                // and sign of result does not match.\n                if (Ra_sl<31:> == Rb_or_imm_sl<31:> && tmp<31:> != Ra_sl<31:>)\n                    fault = new IntegerOverflowFault;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n                Rc_sl = tmp;\n            '],{})

    Fault Addlv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int32_t tmp  = Ra + Rb;
                // signed overflow occurs when operands have same sign
                // and sign of result does not match.
                if (bits(Ra, 31, 31) == bits(Rb, 31, 31) && bits(tmp, 31, 31) != bits(Ra, 31, 31))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault AddlvImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int32_t tmp  = Ra + imm;
                // signed overflow occurs when operands have same sign
                // and sign of result does not match.
                if (bits(Ra, 31, 31) == bits(imm, 31, 31) && bits(tmp, 31, 31) != bits(Ra, 31, 31))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s4addl([' int32_t tmp = (Ra_sl << 2) + Rb_or_imm_sl;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc_sl=tmp;\n\t    '],{})

    Fault S4addl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         int32_t tmp = (Ra << 2) + Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc=tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S4addlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         int32_t tmp = (Ra << 2) + imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc=tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s8addl([' int32_t tmp = (Ra_sl << 3) + Rb_or_imm_sl;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc_sl = tmp;\n\t    '],{})

    Fault S8addl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         int32_t tmp = (Ra << 3) + Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S8addlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         int32_t tmp = (Ra << 3) + imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::addq([' uint64_t tmp = Ra + Rb_or_imm;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Addq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra + Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault AddqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra + imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::addqv(['\n                uint64_t tmp = Ra + Rb_or_imm;\n                // signed overflow occurs when operands have same sign\n                // and sign of result does not match.\n                if (Ra<63:> == Rb_or_imm<63:> && tmp<63:> != Ra<63:>)\n                    fault = new IntegerOverflowFault;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n                Rc = tmp;\n            '],{})

    Fault Addqv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                uint64_t tmp = Ra + Rb;
                // signed overflow occurs when operands have same sign
                // and sign of result does not match.
                if (bits(Ra, 63, 63) == bits(Rb, 63, 63) && bits(tmp, 63, 63) != bits(Ra, 63, 63))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault AddqvImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                uint64_t tmp = Ra + imm;
                // signed overflow occurs when operands have same sign
                // and sign of result does not match.
                if (bits(Ra, 63, 63) == bits(imm, 63, 63) && bits(tmp, 63, 63) != bits(Ra, 63, 63))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s4addq([' uint64_t tmp = (Ra << 2) + Rb_or_imm;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault S4addq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra << 2) + Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S4addqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra << 2) + imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s8addq([' uint64_t tmp = (Ra << 3) + Rb_or_imm; \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault S8addq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra << 3) + Rb; 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S8addqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra << 3) + imm; 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::subl([' int32_t tmp = Ra_sl - Rb_or_imm_sl;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc_sl = tmp;\n\t    '],{})

    Fault Subl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         int32_t tmp = Ra - Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SublImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         int32_t tmp = Ra - imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::sublv(['\n                int32_t tmp  = Ra_sl - Rb_or_imm_sl;\n                // signed overflow detection is same as for add,\n                // except we need to look at the *complemented*\n                // sign bit of the subtrahend (Rb), i.e., if the initial\n                // signs are the *same* then no overflow can occur\n                if (Ra_sl<31:> != Rb_or_imm_sl<31:> && tmp<31:> != Ra_sl<31:>)\n                    fault = new IntegerOverflowFault;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n                Rc_sl = tmp;\n            '],{})

    Fault Sublv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int32_t tmp  = Ra - Rb;
                // signed overflow detection is same as for add,
                // except we need to look at the *complemented*
                // sign bit of the subtrahend (Rb), i.e., if the initial
                // signs are the *same* then no overflow can occur
                if (bits(Ra, 31, 31) != bits(Rb, 31, 31) && bits(tmp, 31, 31) != bits(Ra, 31, 31))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SublvImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int32_t tmp  = Ra - imm;
                // signed overflow detection is same as for add,
                // except we need to look at the *complemented*
                // sign bit of the subtrahend (Rb), i.e., if the initial
                // signs are the *same* then no overflow can occur
                if (bits(Ra, 31, 31) != bits(imm, 31, 31) && bits(tmp, 31, 31) != bits(Ra, 31, 31))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s4subl([' int32_t tmp = (Ra_sl << 2) - Rb_or_imm_sl;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc_sl = tmp;\n\t    '],{})

    Fault S4subl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         int32_t tmp = (Ra << 2) - Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S4sublImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         int32_t tmp = (Ra << 2) - imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s8subl([' int32_t tmp = (Ra_sl << 3) - Rb_or_imm_sl;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc_sl = tmp;\n\t    '],{})

    Fault S8subl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         int32_t tmp = (Ra << 3) - Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S8sublImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         int32_t tmp = (Ra << 3) - imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::subq([' uint64_t tmp = Ra - Rb_or_imm;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Subq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra - Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SubqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra - imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::subqv(['\n                uint64_t tmp  = Ra - Rb_or_imm;\n                // signed overflow detection is same as for add,\n                // except we need to look at the *complemented*\n                // sign bit of the subtrahend (Rb), i.e., if the initial\n                // signs are the *same* then no overflow can occur\n                if (Ra<63:> != Rb_or_imm<63:> && tmp<63:> != Ra<63:>)\n                    fault = new IntegerOverflowFault;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Subqv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                uint64_t tmp  = Ra - Rb;
                // signed overflow detection is same as for add,
                // except we need to look at the *complemented*
                // sign bit of the subtrahend (Rb), i.e., if the initial
                // signs are the *same* then no overflow can occur
                if (bits(Ra, 63, 63) != bits(Rb, 63, 63) && bits(tmp, 63, 63) != bits(Ra, 63, 63))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SubqvImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                uint64_t tmp  = Ra - imm;
                // signed overflow detection is same as for add,
                // except we need to look at the *complemented*
                // sign bit of the subtrahend (Rb), i.e., if the initial
                // signs are the *same* then no overflow can occur
                if (bits(Ra, 63, 63) != bits(imm, 63, 63) && bits(tmp, 63, 63) != bits(Ra, 63, 63))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s4subq([' uint64_t tmp  = (Ra << 2) - Rb_or_imm;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t     Rc = tmp;\n\t    '],{})

    Fault S4subq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = (Ra << 2) - Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	     Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S4subqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = (Ra << 2) - imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	     Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::s8subq([' uint64_t tmp  = (Ra << 3) - Rb_or_imm;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t     Rc = tmp;\n\t    '],{})

    Fault S8subq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = (Ra << 3) - Rb;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	     Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault S8subqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = (Ra << 3) - imm;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	     Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmpeq([' uint64_t tmp = (Ra == Rb_or_imm);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmpeq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra == Rb);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmpeqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra == imm);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmple([' uint64_t tmp = (Ra_sq <= Rb_or_imm_sq);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmple::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
int64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra <= Rb);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmpleImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra <= imm);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmplt([' uint64_t tmp = (Ra_sq <  Rb_or_imm_sq);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmplt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
int64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra <  Rb);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmpltImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra <  imm);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmpule([' uint64_t tmp = (Ra_uq <= Rb_or_imm_uq);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmpule::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra <= Rb);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmpuleImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra <= imm);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmpult([' uint64_t tmp = (Ra_uq <  Rb_or_imm_uq);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmpult::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra <  Rb);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmpultImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra <  imm);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmpbge(['\n                int hi = 7;\n                int lo = 0;\n                uint64_t tmp = 0;\n                for (int i = 0; i < 8; ++i) {\n                    tmp |= (Ra_uq<hi:lo> >= Rb_or_imm_uq<hi:lo>) << i;\n                    hi += 8;\n                    lo += 8;\n                }\n                if(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n                Rc = tmp;\n            '],{})

    Fault Cmpbge::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int hi = 7;
                int lo = 0;
                uint64_t tmp = 0;
                for (int i = 0; i < 8; ++i) {
                    tmp |= (bits(Ra, hi, lo) >= bits(Rb, hi, lo)) << i;
                    hi += 8;
                    lo += 8;
                }
                if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmpbgeImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int hi = 7;
                int lo = 0;
                uint64_t tmp = 0;
                for (int i = 0; i < 8; ++i) {
                    tmp |= (bits(Ra, hi, lo) >= bits(imm, hi, lo)) << i;
                    hi += 8;
                    lo += 8;
                }
                if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// IntegerOperate::and([' uint64_t tmp  = Ra & Rb_or_imm;\n\tif(true)\n\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\tRc = tmp;\n\t'],{})

    Fault And::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = Ra & Rb;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault AndImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = Ra & imm;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::bic([' uint64_t tmp  = Ra & ~Rb_or_imm;\n\tif(true)\n\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\tRc = tmp;\n\t'],{})

    Fault Bic::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = Ra & ~Rb;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault BicImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = Ra & ~imm;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::bis([' uint64_t tmp  = Ra | Rb_or_imm;\n\tif(true)\n\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\tRc = tmp;\n\t'],{})

    Fault Bis::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = Ra | Rb;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault BisImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = Ra | imm;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::ornot([' uint64_t tmp  = Ra | ~Rb_or_imm;\n\tif(true)\n\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\tRc = tmp;  \n\t'],{})

    Fault Ornot::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = Ra | ~Rb;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;  
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault OrnotImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = Ra | ~imm;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;  
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::xor([' uint64_t tmp  = Ra ^ Rb_or_imm;\n\tif(true)\n\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\tRc = tmp;\n\t'],{})

    Fault Xor::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = Ra ^ Rb;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault XorImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = Ra ^ imm;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::eqv([' uint64_t tmp  = Ra ^ ~Rb_or_imm;\n\tif(true)\n\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\tRc = tmp;\n\t'],{})

    Fault Eqv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp  = Ra ^ ~Rb;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault EqvImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp  = Ra ^ ~imm;
	if(true)
	  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmovlbs([' uint64_t tmp = ((Ra & 1) == 1) ? Rb_or_imm : Rc;\n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmovlbs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = ((Ra & 1) == 1) ? Rb : Rc;
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmovlbsImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = ((Ra & 1) == 1) ? imm : Rc;
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmovlbc([' uint64_t tmp = ((Ra & 1) == 0) ? Rb_or_imm : Rc; \n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmovlbc::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = ((Ra & 1) == 0) ? Rb : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmovlbcImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = ((Ra & 1) == 0) ? imm : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmoveq([' uint64_t tmp = (Ra == 0) ? Rb_or_imm : Rc; \n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmoveq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = (Ra == 0) ? Rb : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmoveqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra == 0) ? imm : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmovne([' uint64_t tmp = (Ra != 0) ? Rb_or_imm : Rc;\n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmovne::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = (Ra != 0) ? Rb : Rc;
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmovneImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra != 0) ? imm : Rc;
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmovlt([' uint64_t tmp = (Ra_sq <  0) ? Rb_or_imm : Rc; \n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmovlt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = (Ra <  0) ? Rb : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmovltImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra <  0) ? imm : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmovge([' uint64_t tmp = (Ra_sq >= 0) ? Rb_or_imm : Rc; \n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmovge::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = (Ra >= 0) ? Rb : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmovgeImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra >= 0) ? imm : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmovle([' uint64_t tmp = (Ra_sq <= 0) ? Rb_or_imm : Rc; \n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmovle::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = (Ra <= 0) ? Rb : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmovleImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra <= 0) ? imm : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cmovgt([' uint64_t tmp = (Ra_sq >  0) ? Rb_or_imm : Rc; \n// \t    if(true)\n// \t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Cmovgt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
Rc = xc->readIntRegOperand(this, 2);
;
         uint64_t tmp = (Ra >  0) ? Rb : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault CmovgtImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rc = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra >  0) ? imm : Rc; 
// 	    if(true)
// 	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::amask([' uint64_t tmp = Rb_or_imm & ~ULL(0x17);\n\t      if(true)\n\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t      Rc = tmp;\n\t      '],{})

    Fault Amask::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Rb & ~ULL(0x17);
	      if(true)
		fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	      Rc = tmp;
	      ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault AmaskImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rc = 0;
;
        ;
         uint64_t tmp = imm & ~ULL(0x17);
	      if(true)
		fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	      Rc = tmp;
	      ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// IntegerOperate::implver([' uint64_t tmp = FullSystem ? 1 : 2; \n                        if(true)\n\t\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\tRc = tmp;\n\t\t\t'],{})

    Fault Implver::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rc = 0;
;
        ;
         uint64_t tmp = FullSystem ? 1 : 2; 
                        if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Rc = tmp;
			;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// WarnUnimpl::eleven25(([], {}))

// Unknown::unknown(([], {}))

// IntegerOperate::sll([' uint64_t tmp = Ra << Rb_or_imm<5:0>;\n\t  if(true)\n\t    fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t  Rc = tmp;\n\t  '],{})

    Fault Sll::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra << bits(Rb, 5, 0);
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SllImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra << bits(imm, 5, 0);
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::srl([' uint64_t tmp = Ra_uq >> Rb_or_imm<5:0>;\n\t  if(true)\n\t    fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t  Rc = tmp;\n\t  '],{})

    Fault Srl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra >> bits(Rb, 5, 0);
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SrlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra >> bits(imm, 5, 0);
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::sra([' uint64_t tmp = Ra_sq >> Rb_or_imm<5:0>;\n\t  if(true)\n\t    fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t  Rc = tmp;\n\t  '],{})

    Fault Sra::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra >> bits(Rb, 5, 0);
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SraImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra >> bits(imm, 5, 0);
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mskbl([' uint64_t tmp = Ra & ~(mask( 8) << (Rb_or_imm<2:0> * 8));\n\t  if(true)\n\t    fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t  Rc = tmp;\n\t  '],{})

    Fault Mskbl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra & ~(mask( 8) << (bits(Rb, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MskblImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra & ~(mask( 8) << (bits(imm, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mskwl([' uint64_t tmp = Ra & ~(mask(16) << (Rb_or_imm<2:0> * 8));\n\t  if(true)\n\t    fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t  Rc = tmp;\n\t  '],{})

    Fault Mskwl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra & ~(mask(16) << (bits(Rb, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MskwlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra & ~(mask(16) << (bits(imm, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mskll([' uint64_t tmp = Ra & ~(mask(32) << (Rb_or_imm<2:0> * 8));\n\t  if(true)\n\t    fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t  Rc = tmp;\n\t  '],{})

    Fault Mskll::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra & ~(mask(32) << (bits(Rb, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MskllImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra & ~(mask(32) << (bits(imm, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mskql([' uint64_t tmp = Ra & ~(mask(64) << (Rb_or_imm<2:0> * 8));\n\t  if(true)\n\t    fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t  Rc = tmp;\n\t  '],{})

    Fault Mskql::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra & ~(mask(64) << (bits(Rb, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MskqlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra & ~(mask(64) << (bits(imm, 2, 0) * 8));
	  if(true)
	    fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	  Rc = tmp;
	  ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mskwh(['\n                int bv = Rb_or_imm<2:0>;\n\t\tuint64_t tmp =  bv ? (Ra & ~(mask(16) >> (64 - 8 * bv))) : Ra;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Mskwh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int bv = bits(Rb, 2, 0);
		uint64_t tmp =  bv ? (Ra & ~(mask(16) >> (64 - 8 * bv))) : Ra;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MskwhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int bv = bits(imm, 2, 0);
		uint64_t tmp =  bv ? (Ra & ~(mask(16) >> (64 - 8 * bv))) : Ra;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::msklh(['\n                int bv = Rb_or_imm<2:0>;\n\t\tuint64_t tmp =  bv ? (Ra & ~(mask(32) >> (64 - 8 * bv))) : Ra;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Msklh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int bv = bits(Rb, 2, 0);
		uint64_t tmp =  bv ? (Ra & ~(mask(32) >> (64 - 8 * bv))) : Ra;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MsklhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int bv = bits(imm, 2, 0);
		uint64_t tmp =  bv ? (Ra & ~(mask(32) >> (64 - 8 * bv))) : Ra;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mskqh(['\n                int bv = Rb_or_imm<2:0>;\n\t\tuint64_t tmp =  bv ? (Ra & ~(mask(64) >> (64 - 8 * bv))) : Ra;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Mskqh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int bv = bits(Rb, 2, 0);
		uint64_t tmp =  bv ? (Ra & ~(mask(64) >> (64 - 8 * bv))) : Ra;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MskqhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int bv = bits(imm, 2, 0);
		uint64_t tmp =  bv ? (Ra & ~(mask(64) >> (64 - 8 * bv))) : Ra;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::extbl([' uint64_t tmp = (Ra_uq >> (Rb_or_imm<2:0> * 8))< 7:0>; \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Extbl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = bits((Ra >> (bits(Rb, 2, 0) * 8)), 7, 0); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ExtblImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = bits((Ra >> (bits(imm, 2, 0) * 8)), 7, 0); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::extwl([' uint64_t tmp = (Ra_uq >> (Rb_or_imm<2:0> * 8))<15:0>; \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Extwl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = bits((Ra >> (bits(Rb, 2, 0) * 8)), 15, 0); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ExtwlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = bits((Ra >> (bits(imm, 2, 0) * 8)), 15, 0); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::extll([' uint64_t tmp = (Ra_uq >> (Rb_or_imm<2:0> * 8))<31:0>; \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Extll::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = bits((Ra >> (bits(Rb, 2, 0) * 8)), 31, 0); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ExtllImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = bits((Ra >> (bits(imm, 2, 0) * 8)), 31, 0); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::extql([' uint64_t tmp = (Ra_uq >> (Rb_or_imm<2:0> * 8)); \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Extql::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = (Ra >> (bits(Rb, 2, 0) * 8)); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ExtqlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = (Ra >> (bits(imm, 2, 0) * 8)); 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::extwh(['\n\t      uint64_t tmp = (Ra << (64 - (Rb_or_imm<2:0> * 8))<5:0>)<15:0>; \n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n\t    '],{})

    Fault Extwh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
	      uint64_t tmp = bits((Ra << bits((64 - (bits(Rb, 2, 0) * 8)), 5, 0)), 15, 0); 
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ExtwhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
	      uint64_t tmp = bits((Ra << bits((64 - (bits(imm, 2, 0) * 8)), 5, 0)), 15, 0); 
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::extlh(['\n\t      uint64_t tmp = (Ra << (64 - (Rb_or_imm<2:0> * 8))<5:0>)<31:0>; \n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n\t    '],{})

    Fault Extlh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
	      uint64_t tmp = bits((Ra << bits((64 - (bits(Rb, 2, 0) * 8)), 5, 0)), 31, 0); 
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ExtlhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
	      uint64_t tmp = bits((Ra << bits((64 - (bits(imm, 2, 0) * 8)), 5, 0)), 31, 0); 
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::extqh(['\n\t      uint64_t tmp = (Ra << (64 - (Rb_or_imm<2:0> * 8))<5:0>); \n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n\t    '],{})

    Fault Extqh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
	      uint64_t tmp = (Ra << bits((64 - (bits(Rb, 2, 0) * 8)), 5, 0)); 
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ExtqhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
	      uint64_t tmp = (Ra << bits((64 - (bits(imm, 2, 0) * 8)), 5, 0)); 
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::insbl([' uint64_t tmp = Ra< 7:0> << (Rb_or_imm<2:0> * 8);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Insbl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = bits(Ra, 7, 0) << (bits(Rb, 2, 0) * 8);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault InsblImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = bits(Ra, 7, 0) << (bits(imm, 2, 0) * 8);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::inswl([' uint64_t tmp = Ra<15:0> << (Rb_or_imm<2:0> * 8); \n\t      if(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n\t    '],{})

    Fault Inswl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = bits(Ra, 15, 0) << (bits(Rb, 2, 0) * 8); 
	      if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault InswlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = bits(Ra, 15, 0) << (bits(imm, 2, 0) * 8); 
	      if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::insll([' uint64_t tmp = Ra<31:0> << (Rb_or_imm<2:0> * 8);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Insll::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = bits(Ra, 31, 0) << (bits(Rb, 2, 0) * 8);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault InsllImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = bits(Ra, 31, 0) << (bits(imm, 2, 0) * 8);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::insql([' uint64_t tmp = Ra       << (Rb_or_imm<2:0> * 8);\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc = tmp;\n\t    '],{})

    Fault Insql::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra       << (bits(Rb, 2, 0) * 8);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault InsqlImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra       << (bits(imm, 2, 0) * 8);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::inswh(['\n                int bv = Rb_or_imm<2:0>;\n\t\tuint64_t tmp = bv ? (Ra_uq<15:0> >> (64 - 8 * bv)) : 0;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Inswh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int bv = bits(Rb, 2, 0);
		uint64_t tmp = bv ? (bits(Ra, 15, 0) >> (64 - 8 * bv)) : 0;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault InswhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int bv = bits(imm, 2, 0);
		uint64_t tmp = bv ? (bits(Ra, 15, 0) >> (64 - 8 * bv)) : 0;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::inslh(['\n                int bv = Rb_or_imm<2:0>;\n\t\tuint64_t tmp = bv ? (Ra_uq<31:0> >> (64 - 8 * bv)) : 0;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Inslh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int bv = bits(Rb, 2, 0);
		uint64_t tmp = bv ? (bits(Ra, 31, 0) >> (64 - 8 * bv)) : 0;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault InslhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int bv = bits(imm, 2, 0);
		uint64_t tmp = bv ? (bits(Ra, 31, 0) >> (64 - 8 * bv)) : 0;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::insqh(['\n                int bv = Rb_or_imm<2:0>;\n\t\tuint64_t tmp = bv ? (Ra_uq       >> (64 - 8 * bv)) : 0;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Insqh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                int bv = bits(Rb, 2, 0);
		uint64_t tmp = bv ? (Ra       >> (64 - 8 * bv)) : 0;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault InsqhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int bv = bits(imm, 2, 0);
		uint64_t tmp = bv ? (Ra       >> (64 - 8 * bv)) : 0;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::zap(['\n                uint64_t zapmask = 0;\n                for (int i = 0; i < 8; ++i) {\n                    if (Rb_or_imm<i:>)\n                        zapmask |= (mask(8) << (i * 8));\n                }\n                uint64_t tmp = Ra & ~zapmask;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Zap::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                uint64_t zapmask = 0;
                for (int i = 0; i < 8; ++i) {
                    if (bits(Rb, i, i))
                        zapmask |= (mask(8) << (i * 8));
                }
                uint64_t tmp = Ra & ~zapmask;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ZapImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                uint64_t zapmask = 0;
                for (int i = 0; i < 8; ++i) {
                    if (bits(imm, i, i))
                        zapmask |= (mask(8) << (i * 8));
                }
                uint64_t tmp = Ra & ~zapmask;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::zapnot(['\n                uint64_t zapmask = 0;\n                for (int i = 0; i < 8; ++i) {\n                    if (!Rb_or_imm<i:>)\n                        zapmask |= (mask(8) << (i * 8));\n                }\n                uint64_t tmp = Ra & ~zapmask;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tRc = tmp;\n            '],{})

    Fault Zapnot::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                uint64_t zapmask = 0;
                for (int i = 0; i < 8; ++i) {
                    if (!bits(Rb, i, i))
                        zapmask |= (mask(8) << (i * 8));
                }
                uint64_t tmp = Ra & ~zapmask;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault ZapnotImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                uint64_t zapmask = 0;
                for (int i = 0; i < 8; ++i) {
                    if (!bits(imm, i, i))
                        zapmask |= (mask(8) << (i * 8));
                }
                uint64_t tmp = Ra & ~zapmask;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Rc = tmp;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// IntegerOperate::mull([' int32_t tmp = Ra_sl * Rb_or_imm_sl;\n\t\t      if(true)\n\t\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t      Rc_sl = tmp;\n\t', 'IntMultOp'],{})

    Fault Mull::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         int32_t tmp = Ra * Rb;
		      if(true)
			fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		      Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MullImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         int32_t tmp = Ra * imm;
		      if(true)
			fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		      Rc = tmp;
	;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mulq([' uint64_t tmp = Ra    * Rb_or_imm;  \n\t\t    if(true)\n\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t    Rc   =tmp;\n\t', 'IntMultOp'],{})

    Fault Mulq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         uint64_t tmp = Ra    * Rb;  
		    if(true)
		      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		    Rc   =tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MulqImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra    * imm;  
		    if(true)
		      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		    Rc   =tmp;
	;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::umulh(['\n                uint64_t hi, lo;\n                mul128(Ra, Rb_or_imm, hi, lo);\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&hi);\n                Rc = hi;\n            ', 'IntMultOp'],{})

    Fault Umulh::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                uint64_t hi, lo;
                mul128(Ra, Rb, hi, lo);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&hi);
                Rc = hi;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault UmulhImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                uint64_t hi, lo;
                mul128(Ra, imm, hi, lo);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&hi);
                Rc = hi;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mullv(['\n                // 32-bit multiply with trap on overflow\n                int64_t Rax = Ra_sl;    // sign extended version of Ra_sl\n                int64_t Rbx = Rb_or_imm_sl;\n                int64_t tmp = Rax * Rbx;\n                // To avoid overflow, all the upper 32 bits must match\n                // the sign bit of the lower 32.  We code this as\n                // checking the upper 33 bits for all 0s or all 1s.\n                uint64_t sign_bits = tmp<63:31>;\n                if (sign_bits != 0 && sign_bits != mask(33))\n                    fault = new IntegerOverflowFault;\n\t\tint32_t tmp1 = tmp<31:0>;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp1);\n                Rc_sl = tmp1;\n            ', 'IntMultOp'],{})

    Fault Mullv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rb = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                // 32-bit multiply with trap on overflow
                int64_t Rax = Ra;    // sign extended version of Ra
                int64_t Rbx = Rb;
                int64_t tmp = Rax * Rbx;
                // To avoid overflow, all the upper 32 bits must match
                // the sign bit of the lower 32.  We code this as
                // checking the upper 33 bits for all 0s or all 1s.
                uint64_t sign_bits = bits(tmp, 63, 31);
                if (sign_bits != 0 && sign_bits != mask(33))
                    fault = new IntegerOverflowFault;
		int32_t tmp1 = bits(tmp, 31, 0);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp1);
                Rc = tmp1;
            ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MullvImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int32_t Ra = 0;
int32_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                // 32-bit multiply with trap on overflow
                int64_t Rax = Ra;    // sign extended version of Ra
                int64_t Rbx = imm;
                int64_t tmp = Rax * Rbx;
                // To avoid overflow, all the upper 32 bits must match
                // the sign bit of the lower 32.  We code this as
                // checking the upper 33 bits for all 0s or all 1s.
                uint64_t sign_bits = bits(tmp, 63, 31);
                if (sign_bits != 0 && sign_bits != mask(33))
                    fault = new IntegerOverflowFault;
		int32_t tmp1 = bits(tmp, 31, 0);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp1);
                Rc = tmp1;
            ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::mulqv(['\n                // 64-bit multiply with trap on overflow\n                uint64_t hi, lo;\n                mul128(Ra, Rb_or_imm, hi, lo);\n                // all the upper 64 bits must match the sign bit of\n                // the lower 64\n                if (!((hi == 0 && lo<63:> == 0) ||\n                      (hi == mask(64) && lo<63:> == 1)))\n                    fault = new IntegerOverflowFault;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&lo);\n                Rc = lo;\n            ', 'IntMultOp'],{})

    Fault Mulqv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                // 64-bit multiply with trap on overflow
                uint64_t hi, lo;
                mul128(Ra, Rb, hi, lo);
                // all the upper 64 bits must match the sign bit of
                // the lower 64
                if (!((hi == 0 && bits(lo, 63, 63) == 0) ||
                      (hi == mask(64) && bits(lo, 63, 63) == 1)))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&lo);
                Rc = lo;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault MulqvImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                // 64-bit multiply with trap on overflow
                uint64_t hi, lo;
                mul128(Ra, imm, hi, lo);
                // all the upper 64 bits must match the sign bit of
                // the lower 64
                if (!((hi == 0 && bits(lo, 63, 63) == 0) ||
                      (hi == mask(64) && bits(lo, 63, 63) == 1)))
                    fault = new IntegerOverflowFault;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&lo);
                Rc = lo;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// IntegerOperate::sextb([' int8_t tmp = Rb_or_imm< 7:0>;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc_sb = tmp;\n\t    '],{})

    Fault Sextb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
int8_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         int8_t tmp = bits(Rb, 7, 0);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int8_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SextbImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int8_t Rc = 0;
;
        ;
         int8_t tmp = bits(imm, 7, 0);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int8_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// IntegerOperate::sextw([' int16_t tmp = Rb_or_imm<15:0>;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Rc_sw = tmp;\n\t    '],{})

    Fault Sextw::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
int16_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         int16_t tmp = bits(Rb, 15, 0);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int16_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault SextwImm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int16_t Rc = 0;
;
        ;
         int16_t tmp = bits(imm, 15, 0);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Rc = tmp;
	    ;

        if (fault == NoFault) {
            
        
        {
            int16_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// IntegerOperate::ctpop(['\n                             uint64_t count = 0;\n                             for (int i = 0; Rb<63:i>; ++i) {\n                                 if (Rb<i:i> == 0x1)\n                                     ++count;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&count);\n                             Rc = count;\n                           ', 'IntAluOp'],{})

    Fault Ctpop::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
        
                             uint64_t count = 0;
                             for (int i = 0; bits(Rb, 63, i); ++i) {
                                 if (bits(Rb, i, i) == 0x1)
                                     ++count;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&count);
                             Rc = count;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::perr(['\n                             uint64_t temp = 0;\n                             int hi = 7;\n                             int lo = 0;\n                             for (int i = 0; i < 8; ++i) {\n                                 uint8_t ra_ub = Ra_uq<hi:lo>;\n                                 uint8_t rb_ub = Rb_uq<hi:lo>;\n                                 temp += (ra_ub >= rb_ub) ? \n                                         (ra_ub - rb_ub) : (rb_ub - ra_ub);\n                                 hi += 8;\n                                 lo += 8;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                           '],{})

    Fault Perr::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 7;
                             int lo = 0;
                             for (int i = 0; i < 8; ++i) {
                                 uint8_t ra_ub = bits(Ra, hi, lo);
                                 uint8_t rb_ub = bits(Rb, hi, lo);
                                 temp += (ra_ub >= rb_ub) ? 
                                         (ra_ub - rb_ub) : (rb_ub - ra_ub);
                                 hi += 8;
                                 lo += 8;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::ctlz(['\n                             uint64_t count = 0;\n                             uint64_t temp = Rb;\n                             if (temp<63:32>) temp >>= 32; else count += 32;\n                             if (temp<31:16>) temp >>= 16; else count += 16;\n                             if (temp<15:8>) temp >>= 8; else count += 8;\n                             if (temp<7:4>) temp >>= 4; else count += 4;\n                             if (temp<3:2>) temp >>= 2; else count += 2;\n                             if (temp<1:1>) temp >>= 1; else count += 1;\n                             if ((temp<0:0>) != 0x1) count += 1;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&count);\n                             Rc = count;\n                           ', 'IntAluOp'],{})

    Fault Ctlz::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
        
                             uint64_t count = 0;
                             uint64_t temp = Rb;
                             if (bits(temp, 63, 32)) temp >>= 32; else count += 32;
                             if (bits(temp, 31, 16)) temp >>= 16; else count += 16;
                             if (bits(temp, 15, 8)) temp >>= 8; else count += 8;
                             if (bits(temp, 7, 4)) temp >>= 4; else count += 4;
                             if (bits(temp, 3, 2)) temp >>= 2; else count += 2;
                             if (bits(temp, 1, 1)) temp >>= 1; else count += 1;
                             if ((bits(temp, 0, 0)) != 0x1) count += 1;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&count);
                             Rc = count;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::cttz(['\n                             uint64_t count = 0;\n                             uint64_t temp = Rb;\n                             if (!(temp<31:0>)) { temp >>= 32; count += 32; }\n                             if (!(temp<15:0>)) { temp >>= 16; count += 16; }\n                             if (!(temp<7:0>)) { temp >>= 8; count += 8; }\n                             if (!(temp<3:0>)) { temp >>= 4; count += 4; }\n                             if (!(temp<1:0>)) { temp >>= 2; count += 2; }\n                             if (!(temp<0:0> & ULL(0x1))) { \n                                 temp >>= 1; count += 1; \n                             }\n                             if (!(temp<0:0> & ULL(0x1))) count += 1;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&count);\n                             Rc = count;\n                           ', 'IntAluOp'],{})

    Fault Cttz::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
        
                             uint64_t count = 0;
                             uint64_t temp = Rb;
                             if (!(bits(temp, 31, 0))) { temp >>= 32; count += 32; }
                             if (!(bits(temp, 15, 0))) { temp >>= 16; count += 16; }
                             if (!(bits(temp, 7, 0))) { temp >>= 8; count += 8; }
                             if (!(bits(temp, 3, 0))) { temp >>= 4; count += 4; }
                             if (!(bits(temp, 1, 0))) { temp >>= 2; count += 2; }
                             if (!(bits(temp, 0, 0) & ULL(0x1))) { 
                                 temp >>= 1; count += 1; 
                             }
                             if (!(bits(temp, 0, 0) & ULL(0x1))) count += 1;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&count);
                             Rc = count;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::unpkbw([' \n                             uint64_t tmp = (Rb_uq<7:0>\n                                   | (Rb_uq<15:8> << 16)\n                                   | (Rb_uq<23:16> << 32)\n                                   | (Rb_uq<31:24> << 48));\n\t\t\t     if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t     Rc = tmp;\n                           ', 'IntAluOp'],{})

    Fault Unpkbw::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         
                             uint64_t tmp = (bits(Rb, 7, 0)
                                   | (bits(Rb, 15, 8) << 16)
                                   | (bits(Rb, 23, 16) << 32)
                                   | (bits(Rb, 31, 24) << 48));
			     if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			     Rc = tmp;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::unpkbl(['\n\t\t\t    uint64_t tmp = (Rb_uq<7:0> | (Rb_uq<15:8> << 32));\n\t\t\t    if(true)\n\t\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t    Rc = tmp;\n                           ', 'IntAluOp'],{})

    Fault Unpkbl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
        
			    uint64_t tmp = (bits(Rb, 7, 0) | (bits(Rb, 15, 8) << 32));
			    if(true)
			      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			    Rc = tmp;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::pkwb(['\n\t\t\t  uint64_t tmp  = (Rb_uq<7:0>\n                                   | (Rb_uq<23:16> << 8)\n                                   | (Rb_uq<39:32> << 16)\n                                   | (Rb_uq<55:48> << 24));\n\t\t\t     if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t     Rc = tmp;\n                           ', 'IntAluOp'],{})

    Fault Pkwb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
        
			  uint64_t tmp  = (bits(Rb, 7, 0)
                                   | (bits(Rb, 23, 16) << 8)
                                   | (bits(Rb, 39, 32) << 16)
                                   | (bits(Rb, 55, 48) << 24));
			     if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			     Rc = tmp;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::pklb(['\n\t      uint64_t tmp  = (Rb_uq<7:0> | (Rb_uq<39:32> << 8));\n\t\t\t     if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t     Rc = tmp;\n                           ', 'IntAluOp'],{})

    Fault Pklb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
        
	      uint64_t tmp  = (bits(Rb, 7, 0) | (bits(Rb, 39, 32) << 8));
			     if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			     Rc = tmp;
                           ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::minsb8(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 56;\n                             for (int i = 7; i >= 0; --i) {\n                                 int8_t ra_sb = Ra_uq<hi:lo>;\n                                 int8_t rb_sb = Rb_uq<hi:lo>;\n                                 temp = ((temp << 8) \n                                         | ((ra_sb < rb_sb) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 8;\n                                 lo -= 8;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Minsb8::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 56;
                             for (int i = 7; i >= 0; --i) {
                                 int8_t ra_sb = bits(Ra, hi, lo);
                                 int8_t rb_sb = bits(Rb, hi, lo);
                                 temp = ((temp << 8) 
                                         | ((ra_sb < rb_sb) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 8;
                                 lo -= 8;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::minsw4(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 48;\n                             for (int i = 3; i >= 0; --i) {\n                                 int16_t ra_sw = Ra_uq<hi:lo>;\n                                 int16_t rb_sw = Rb_uq<hi:lo>;\n                                 temp = ((temp << 16) \n                                         | ((ra_sw < rb_sw) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 16;\n                                 lo -= 16;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Minsw4::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 48;
                             for (int i = 3; i >= 0; --i) {
                                 int16_t ra_sw = bits(Ra, hi, lo);
                                 int16_t rb_sw = bits(Rb, hi, lo);
                                 temp = ((temp << 16) 
                                         | ((ra_sw < rb_sw) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 16;
                                 lo -= 16;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::minub8(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 56;\n                             for (int i = 7; i >= 0; --i) {\n                                 uint8_t ra_ub = Ra_uq<hi:lo>;\n                                 uint8_t rb_ub = Rb_uq<hi:lo>;\n                                 temp = ((temp << 8) \n                                         | ((ra_ub < rb_ub) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 8;\n                                 lo -= 8;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Minub8::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 56;
                             for (int i = 7; i >= 0; --i) {
                                 uint8_t ra_ub = bits(Ra, hi, lo);
                                 uint8_t rb_ub = bits(Rb, hi, lo);
                                 temp = ((temp << 8) 
                                         | ((ra_ub < rb_ub) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 8;
                                 lo -= 8;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::minuw4(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 48;\n                             for (int i = 3; i >= 0; --i) {\n                                 uint16_t ra_sw = Ra_uq<hi:lo>;\n                                 uint16_t rb_sw = Rb_uq<hi:lo>;\n                                 temp = ((temp << 16) \n                                         | ((ra_sw < rb_sw) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 16;\n                                 lo -= 16;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Minuw4::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 48;
                             for (int i = 3; i >= 0; --i) {
                                 uint16_t ra_sw = bits(Ra, hi, lo);
                                 uint16_t rb_sw = bits(Rb, hi, lo);
                                 temp = ((temp << 16) 
                                         | ((ra_sw < rb_sw) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 16;
                                 lo -= 16;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::maxub8(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 56;\n                             for (int i = 7; i >= 0; --i) {\n                                 uint8_t ra_ub = Ra_uq<hi:lo>;\n                                 uint8_t rb_ub = Rb_uq<hi:lo>;\n                                 temp = ((temp << 8) \n                                         | ((ra_ub > rb_ub) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 8;\n                                 lo -= 8;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Maxub8::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 56;
                             for (int i = 7; i >= 0; --i) {
                                 uint8_t ra_ub = bits(Ra, hi, lo);
                                 uint8_t rb_ub = bits(Rb, hi, lo);
                                 temp = ((temp << 8) 
                                         | ((ra_ub > rb_ub) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 8;
                                 lo -= 8;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::maxuw4(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 48;\n                             for (int i = 3; i >= 0; --i) {\n                                 uint16_t ra_uw = Ra_uq<hi:lo>;\n                                 uint16_t rb_uw = Rb_uq<hi:lo>;\n                                 temp = ((temp << 16) \n                                         | ((ra_uw > rb_uw) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 16;\n                                 lo -= 16;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Maxuw4::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 48;
                             for (int i = 3; i >= 0; --i) {
                                 uint16_t ra_uw = bits(Ra, hi, lo);
                                 uint16_t rb_uw = bits(Rb, hi, lo);
                                 temp = ((temp << 16) 
                                         | ((ra_uw > rb_uw) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 16;
                                 lo -= 16;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::maxsb8(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 56;\n                             for (int i = 7; i >= 0; --i) {\n                                 int8_t ra_sb = Ra_uq<hi:lo>;\n                                 int8_t rb_sb = Rb_uq<hi:lo>;\n                                 temp = ((temp << 8) \n                                         | ((ra_sb > rb_sb) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 8;\n                                 lo -= 8;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Maxsb8::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 56;
                             for (int i = 7; i >= 0; --i) {
                                 int8_t ra_sb = bits(Ra, hi, lo);
                                 int8_t rb_sb = bits(Rb, hi, lo);
                                 temp = ((temp << 8) 
                                         | ((ra_sb > rb_sb) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 8;
                                 lo -= 8;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// IntegerOperate::maxsw4(['\n                             uint64_t temp = 0;\n                             int hi = 63;\n                             int lo = 48;\n                             for (int i = 3; i >= 0; --i) {\n                                 int16_t ra_sw = Ra_uq<hi:lo>;\n                                 int16_t rb_sw = Rb_uq<hi:lo>;\n                                 temp = ((temp << 16) \n                                         | ((ra_sw > rb_sw) ? Ra_uq<hi:lo>\n                                                          : Rb_uq<hi:lo>));\n                                 hi -= 16;\n                                 lo -= 16;\n                             }\n                             if(true)\n\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&temp);\n                             Rc = temp;\n                          '],{})

    Fault Maxsw4::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Rc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
        
                             uint64_t temp = 0;
                             int hi = 63;
                             int lo = 48;
                             for (int i = 3; i >= 0; --i) {
                                 int16_t ra_sw = bits(Ra, hi, lo);
                                 int16_t rb_sw = bits(Rb, hi, lo);
                                 temp = ((temp << 16) 
                                         | ((ra_sw > rb_sw) ? bits(Ra, hi, lo)
                                                          : bits(Rb, hi, lo)));
                                 hi -= 16;
                                 lo -= 16;
                             }
                             if(true)
			       fi_system->iew_fault(xc, xc->tcBase(),&temp);
                             Rc = temp;
                          ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::ftoit([' uint64_t temp = Fa_uq;\n\t\t    if(true)\n\t\t      fi_system->iew_fault(xc, xc->tcBase(),&temp);\n\t\t    Rc = temp;\n\t\t    ', 'FloatCvtOp'],{})

    Fault Ftoit::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t Rc = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
;
         uint64_t temp = Fa;
		    if(true)
		      fi_system->iew_fault(xc, xc->tcBase(),&temp);
		    Rc = temp;
		    ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// BasicOperateWithNopCheck::ftois([' int32_t temp = t_to_s(Fa_uq);\n\t\t    if(true)\n\t\t      fi_system->iew_fault(xc, xc->tcBase(),&temp);\n\t\t    Rc_sl = temp;\n\t\t    ', 'FloatCvtOp'],{})

    Fault Ftois::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
int32_t Rc = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
;
         int32_t temp = t_to_s(Fa);
		    if(true)
		      fi_system->iew_fault(xc, xc->tcBase(),&temp);
		    Rc = temp;
		    ;

        if (fault == NoFault) {
            
        
        {
            int32_t final_val = Rc;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// CondBranch::beq([' cond = (Ra == 0); '],{})

    Fault Beq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Ra == 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::bne([' cond = (Ra != 0); '],{})

    Fault Bne::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Ra != 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::bge([' cond = (Ra_sq >= 0); '],{})

    Fault Bge::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Ra >= 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::bgt([' cond = (Ra_sq >  0); '],{})

    Fault Bgt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Ra >  0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::ble([' cond = (Ra_sq <= 0); '],{})

    Fault Ble::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Ra <= 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::blt([' cond = (Ra_sq < 0); '],{})

    Fault Blt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        int64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Ra < 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::blbc([' cond = ((Ra & 1) == 0); '],{})

    Fault Blbc::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = ((Ra & 1) == 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::blbs([' cond = ((Ra & 1) == 1); '],{})

    Fault Blbs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Ra = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = ((Ra & 1) == 1); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::fbeq([' cond = (Fa == 0); '],{})

    Fault Fbeq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Fa = xc->readFloatRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Fa == 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::fbne([' cond = (Fa != 0); '],{})

    Fault Fbne::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Fa = xc->readFloatRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Fa != 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::fbge([' cond = (Fa >= 0); '],{})

    Fault Fbge::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Fa = xc->readFloatRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Fa >= 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::fbgt([' cond = (Fa >  0); '],{})

    Fault Fbgt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Fa = xc->readFloatRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Fa >  0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::fble([' cond = (Fa <= 0); '],{})

    Fault Fble::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Fa = xc->readFloatRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Fa <= 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// CondBranch::fblt([' cond = (Fa < 0); '],{})

    Fault Fblt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Fa = xc->readFloatRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        
        bool cond;
         cond = (Fa < 0); ;
	if(fi_system->fi_execute)
	  fi_system->iew_fault(xc, xc->tcBase(),&cond);
        if (cond)
            NPC = NPC + disp;
        else
            NPC = NPC;
    ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// UncondBranch::br([],{})

    Fault Br::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
NPC = __parserAutoPCState.npc();
;
        NPC = NPC + disp;
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

    Fault BrAndLink::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
NPC = __parserAutoPCState.npc();
;
        Ra = NPC & ~3;
NPC = NPC + disp;
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }__parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// UncondBranch::bsr(['IsCall'],{})

    Fault Bsr::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
NPC = __parserAutoPCState.npc();
;
        NPC = NPC + disp;
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

    Fault BsrAndLink::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
NPC = __parserAutoPCState.npc();
;
        Ra = NPC & ~3;
NPC = NPC + disp;
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }__parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// Jump::jmp([],{})

    Fault Jmp::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

    Fault JmpAndLink::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        Ra = NPC & ~3;
NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }__parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// Jump::jsr(['IsCall'],{})

    Fault Jsr::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

    Fault JsrAndLink::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        Ra = NPC & ~3;
NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }__parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// Jump::ret(['IsReturn'],{})

    Fault Ret::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

    Fault RetAndLink::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        Ra = NPC & ~3;
NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }__parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// Jump::jsr_coroutine(['IsCall', 'IsReturn'],{})

    Fault Jsr_coroutine::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

    Fault Jsr_coroutineAndLink::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
Rb = xc->readIntRegOperand(this, 0);
NPC = __parserAutoPCState.npc();
;
        Ra = NPC & ~3;
NPC = (Rb & ~3) | (NPC & 1);
 if(fi_system->fi_execute) fi_system->iew_fault(xc, xc->tcBase(),&NPC);;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }__parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// BasicOperateWithNopCheck::itofs([' uint64_t tmp = s_to_t(Ra_ul);\n\t\t    if(true)\n\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t    Fc_uq = tmp;\n\t\t    ', 'FloatCvtOp'],{})

    Fault Itofs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint32_t Ra = 0;
uint64_t Fc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = s_to_t(Ra);
		    if(true)
		      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		    Fc = tmp;
		    ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::itoft([' uint64_t tmp = Ra_uq;\n\t\t    if(true)\n\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t    Fc_uq = tmp;\n\t\t    ', 'FloatCvtOp'],{})

    Fault Itoft::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Ra = 0;
uint64_t Fc = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
         uint64_t tmp = Ra;
		    if(true)
		      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		    Fc = tmp;
		    ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FailUnimpl::itoff(([], {}))

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))
#if SS_COMPATIBLE_FP

// FloatingPointOperate::sqrts(['\n                        if (Fb < 0.0)\n                            fault = new ArithmeticFault;\n                        double tmp = sqrt(Fb);\n\t\t\tif(true)\n\t\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\tFc = tmp;\n                    ', 'FloatSqrtOp'],{})

    Fault Sqrts::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fb = 0;
double Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
#if USE_FENV
        if (roundingMode == Normal) {
            
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
                        double tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
                    ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
            
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
                        double tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
                    ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
        
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
                        double tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
                    ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }
#else

// FloatingPointOperate::sqrts(['\n                        if (Fb_sf < 0.0)\n                            fault = new ArithmeticFault;\n\t\t\tfloat tmp;\n                        tmp = sqrt(Fb_sf);\n\t\t\tif(true)\n\t\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\tFc_sf = tmp;\n                    ', 'FloatSqrtOp'],{})

    Fault Sqrts::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        float Fb = 0;
float Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
#if USE_FENV
        if (roundingMode == Normal) {
            
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
			float tmp;
                        tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
                    ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
            
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
			float tmp;
                        tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
                    ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
        
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
			float tmp;
                        tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
                    ;
#endif

        if (fault == NoFault) {
            
        {
            float final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }
#endif

// FloatingPointOperate::sqrtt(['\n                        if (Fb < 0.0)\n                            fault = new ArithmeticFault;\n\t\t\tdouble tmp;\n\t\t\ttmp = sqrt(Fb);\n\t\t\tif(true)\n\t\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n                        Fc = tmp;\n                    ', 'FloatSqrtOp'],{})

    Fault Sqrtt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fb = 0;
double Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
#if USE_FENV
        if (roundingMode == Normal) {
            
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
			double tmp;
			tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                        Fc = tmp;
                    ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
            
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
			double tmp;
			tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                        Fc = tmp;
                    ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
        
                        if (Fb < 0.0)
                            fault = new ArithmeticFault;
			double tmp;
			tmp = sqrt(Fb);
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
                        Fc = tmp;
                    ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// FailUnimpl::sqrtfg(([], {}))

// Unknown::unknown(([], {}))
#if SS_COMPATIBLE_FP

// FloatingPointOperate::adds([' double tmp = Fa + Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      '],{})

    Fault Adds::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::subs([' double tmp = Fa - Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      '],{})

    Fault Subs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::muls([' double tmp = Fa * Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      ', 'FloatMultOp'],{})

    Fault Muls::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::divs([' double tmp = Fa / Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      ', 'FloatDivOp'],{})

    Fault Divs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }
#else

// FloatingPointOperate::adds([' float temp = Fa_sf + Fb_sf;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc_sf = temp;\n\t\t      '],{})

    Fault Adds::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        float Fa = 0;
float Fb = 0;
float Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             float temp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = temp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             float temp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = temp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         float temp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = temp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            float final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::subs([' float temp =  Fa_sf - Fb_sf;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc_sf =tmp;\n\t\t      '],{})

    Fault Subs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        float Fa = 0;
float Fb = 0;
float Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             float temp =  Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc =tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             float temp =  Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc =tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         float temp =  Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc =tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            float final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::muls([' float temp = Fa_sf * Fb_sf;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t  Fc_sf = tmp;\n\t\t      ', 'FloatMultOp'],{})

    Fault Muls::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        float Fa = 0;
float Fb = 0;
float Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             float temp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			  Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             float temp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			  Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         float temp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			  Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            float final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::divs([' float temp =Fa_sf / Fb_sf;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc_sf = tmp;\n\t\t      ', 'FloatDivOp'],{})

    Fault Divs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        float Fa = 0;
float Fb = 0;
float Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             float temp =Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             float temp =Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         float temp =Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            float final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }
#endif

// FloatingPointOperate::addt([' double tmp = Fa + Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      '],{})

    Fault Addt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa + Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::subt([' double tmp = Fa - Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      '],{})

    Fault Subt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa - Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::mult([' double tmp = Fa * Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      ', 'FloatMultOp'],{})

    Fault Mult::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa * Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::divt([' double tmp = Fa / Fb;\n\t\t       if(true)\n\t\t\t fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t       Fc = tmp;\n\t\t      ', 'FloatDivOp'],{})

    Fault Divt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp = Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp = Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp = Fa / Fb;
		       if(true)
			 fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		       Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// BasicOperateWithNopCheck::cmpteq([' double tmp = (Fa == Fb) ? 2.0 : 0.0;\n\t      if(true)\n\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t      Fc = tmp;\n\t      ', 'FloatCmpOp'],{})

    Fault Cmpteq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
         double tmp = (Fa == Fb) ? 2.0 : 0.0;
	      if(true)
		fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	      Fc = tmp;
	      ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cmptle([' double tmp = (Fa <= Fb) ? 2.0 : 0.0;\n\t      if(true)\n\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t      Fc = tmp;\n\t      ', 'FloatCmpOp'],{})

    Fault Cmptle::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
         double tmp = (Fa <= Fb) ? 2.0 : 0.0;
	      if(true)
		fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	      Fc = tmp;
	      ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cmptlt([' double tmp = (Fa <  Fb) ? 2.0 : 0.0;\n\t      if(true)\n\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t      Fc = tmp;\n\t      ', 'FloatCmpOp'],{})

    Fault Cmptlt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
         double tmp = (Fa <  Fb) ? 2.0 : 0.0;
	      if(true)
		fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	      Fc = tmp;
	      ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cmptun([' // unordered\n                double tmp = (!(Fa < Fb) && !(Fa == Fb) && !(Fa > Fb)) ? 2.0 : 0.0;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tFc = tmp;\n                ', 'FloatCmpOp'],{})

    Fault Cmptun::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
;
         // unordered
                double tmp = (!(Fa < Fb) && !(Fa == Fb) && !(Fa > Fb)) ? 2.0 : 0.0;
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Fc = tmp;
                ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// FPFixedRounding::cvttq([' int64_t tmp  = (int64_t)trunc(Fb);\n\t\t\t    if(true)\n\t\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t    Fc_sq = tmp;\n\t\t\t    ', 'Chopped'],{})

    Fault CvttqChopped::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fb = 0;
int64_t Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
         int64_t tmp  = (int64_t)trunc(Fb);
			    if(true)
			      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			    Fc = tmp;
			    ;

        if (fault == NoFault) {
            
        {
            int64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FPFixedRounding::cvttq([' int64_t tmp  = (int64_t)floor(Fb);\n\t\t\t    if(true)\n\t\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t    Fc_sq = tmp;\n\t\t\t    ', 'MinusInfinity'],{})

    Fault CvttqMinusInfinity::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fb = 0;
int64_t Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
         int64_t tmp  = (int64_t)floor(Fb);
			    if(true)
			      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			    Fc = tmp;
			    ;

        if (fault == NoFault) {
            
        {
            int64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::cvttq([' int64_t tmp = (int64_t)nearbyint(Fb);\n\t\t\t\t     if(true)\n\t\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t\t     Fc_sq = tmp;\n\t\t      '],{})

    Fault Cvttq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fb = 0;
int64_t Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
#if USE_FENV
        if (roundingMode == Normal) {
             int64_t tmp = (int64_t)nearbyint(Fb);
				     if(true)
				       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
				     Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             int64_t tmp = (int64_t)nearbyint(Fb);
				     if(true)
				       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
				     Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         int64_t tmp = (int64_t)nearbyint(Fb);
				     if(true)
				       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
				     Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            int64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cvtst([' double tmp = Fb_sf;\n\t\t\t    if(true)\n\t\t\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t    Fc = tmp;\n\t\t\t    '],{})

    Fault Cvtst::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        float Fb = 0;
double Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
         double tmp = Fb;
			    if(true)
			      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			    Fc = tmp;
			    ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::cvtts([' float tmp =  Fb;\n\t\t\t\t     if(true)\n\t\t\t\t       fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\t\t     Fc_sf = tmp;\n\t\t      '],{})

    Fault Cvtts::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fb = 0;
float Fc = 0;
;
        Fb = xc->readFloatRegOperand(this, 0);
;
#if USE_FENV
        if (roundingMode == Normal) {
             float tmp =  Fb;
				     if(true)
				       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
				     Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             float tmp =  Fb;
				     if(true)
				       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
				     Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         float tmp =  Fb;
				     if(true)
				       fi_system->iew_fault(xc, xc->tcBase(),&tmp);
				     Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            float final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// FloatingPointOperate::cvtqs([' float tmp = Fb_sq;\n\t\t      if(true)\n\t\t\tfi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t      Fc_sf = tmp;\n\t\t      '],{})

    Fault Cvtqs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        int64_t Fb = 0;
float Fc = 0;
;
        Fb = xc->readFloatRegOperandBits(this, 0);
;
#if USE_FENV
        if (roundingMode == Normal) {
             float tmp = Fb;
		      if(true)
			fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		      Fc = tmp;
		      ;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             float tmp = Fb;
		      if(true)
			fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		      Fc = tmp;
		      ;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         float tmp = Fb;
		      if(true)
			fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		      Fc = tmp;
		      ;
#endif

        if (fault == NoFault) {
            
        {
            float final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// FloatingPointOperate::cvtqt([' double tmp    = Fb_sq;\n\t\t\tif(true)\n\t\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\t\tFc = tmp;\n\t\t\t'],{})

    Fault Cvtqt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        if (trappingMode != Imprecise && !warnedOnTrapping) {
            warn("%s: non-standard trapping mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnTrapping = true;
        }

        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        int64_t Fb = 0;
double Fc = 0;
;
        Fb = xc->readFloatRegOperandBits(this, 0);
;
#if USE_FENV
        if (roundingMode == Normal) {
             double tmp    = Fb;
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
			;
        } else {
            m5_fesetround(getC99RoundingMode(
                           xc->readMiscReg(MISCREG_FPCR)));
             double tmp    = Fb;
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
			;
            m5_fesetround(M5_FE_TONEAREST);
        }
#else
        if (roundingMode != Normal && !warnedOnRounding) {
            warn("%s: non-standard rounding mode not supported",
                 generateDisassembly(0, NULL));
            warnedOnRounding = true;
        }
         double tmp    = Fb;
			if(true)
			  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
			Fc = tmp;
			;
#endif

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// BasicOperateWithNopCheck::cvtlq(['\n\t\tint32_t tmp = (Fb_uq<63:62> << 30) | Fb_uq<58:29>;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tFc_sl = tmp;\n            '],{})

    Fault Cvtlq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fb = 0;
int32_t Fc = 0;
;
        Fb = xc->readFloatRegOperandBits(this, 0);
;
        
		int32_t tmp = (bits(Fb, 63, 62) << 30) | bits(Fb, 58, 29);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Fc = tmp;
            ;

        if (fault == NoFault) {
            
        {
            int32_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cvtql(['\n                uint64_t tmp = (Fb_uq<31:30> << 62) | (Fb_uq<29:0> << 29);\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tFc_uq = tmp;\n            '],{})

    Fault Cvtql::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fb = 0;
uint64_t Fc = 0;
;
        Fb = xc->readFloatRegOperandBits(this, 0);
;
        
                uint64_t tmp = (bits(Fb, 31, 30) << 62) | (bits(Fb, 29, 0) << 29);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Fc = tmp;
            ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cvtqlv(['\n                // To avoid overflow, all the upper 32 bits must match\n                // the sign bit of the lower 32.  We code this as\n                // checking the upper 33 bits for all 0s or all 1s.\n                uint64_t sign_bits = Fb_uq<63:31>;\n                if (sign_bits != 0 && sign_bits != mask(33))\n                    fault = new IntegerOverflowFault;\n\t\tuint64_t tmp =  (Fb_uq<31:30> << 62) | (Fb_uq<29:0> << 29);\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tFc_uq = tmp;\n            '],{})

    Fault Cvtqlv::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fb = 0;
uint64_t Fc = 0;
;
        Fb = xc->readFloatRegOperandBits(this, 0);
;
        
                // To avoid overflow, all the upper 32 bits must match
                // the sign bit of the lower 32.  We code this as
                // checking the upper 33 bits for all 0s or all 1s.
                uint64_t sign_bits = bits(Fb, 63, 31);
                if (sign_bits != 0 && sign_bits != mask(33))
                    fault = new IntegerOverflowFault;
		uint64_t tmp =  (bits(Fb, 31, 30) << 62) | (bits(Fb, 29, 0) << 29);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Fc = tmp;
            ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cpys(['  // copy sign\n            uint64_t tmp = (Fa_uq<63:> << 63) | Fb_uq<62:0>;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tFc_uq = tmp;\n            '],{})

    Fault Cpys::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t Fb = 0;
uint64_t Fc = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
Fb = xc->readFloatRegOperandBits(this, 1);
;
          // copy sign
            uint64_t tmp = (bits(Fa, 63, 63) << 63) | bits(Fb, 62, 0);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Fc = tmp;
            ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cpysn([' // copy sign negated\n            uint64_t tmp = (~Fa_uq<63:> << 63) | Fb_uq<62:0>;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fc_uq = tmp;\n            '],{})

    Fault Cpysn::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t Fb = 0;
uint64_t Fc = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
Fb = xc->readFloatRegOperandBits(this, 1);
;
         // copy sign negated
            uint64_t tmp = (~bits(Fa, 63, 63) << 63) | bits(Fb, 62, 0);
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fc = tmp;
            ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::cpyse([' // copy sign and exponent\n\t\tuint64_t tmp =(Fa_uq<63:52> << 52) | Fb_uq<51:0>;\n\t\tif(true)\n\t\t  fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t\tFc_uq = tmp;\n            '],{})

    Fault Cpyse::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t Fb = 0;
uint64_t Fc = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
Fb = xc->readFloatRegOperandBits(this, 1);
;
         // copy sign and exponent
		uint64_t tmp =(bits(Fa, 63, 52) << 52) | bits(Fb, 51, 0);
		if(true)
		  fi_system->iew_fault(xc, xc->tcBase(),&tmp);
		Fc = tmp;
            ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fc;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::fcmoveq([' double tmp = (Fa == 0) ? Fb : Fc;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fc = tmp;\n\t    '],{})

    Fault Fcmoveq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
Fc = xc->readFloatRegOperand(this, 2);
;
         double tmp = (Fa == 0) ? Fb : Fc;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fc = tmp;
	    ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::fcmovne([' double tmp = (Fa != 0) ? Fb : Fc; \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fc = tmp;\n\t    '],{})

    Fault Fcmovne::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
Fc = xc->readFloatRegOperand(this, 2);
;
         double tmp = (Fa != 0) ? Fb : Fc; 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fc = tmp;
	    ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::fcmovlt([' double tmp = (Fa <  0) ? Fb : Fc; \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fc = tmp;\n\t    '],{})

    Fault Fcmovlt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
Fc = xc->readFloatRegOperand(this, 2);
;
         double tmp = (Fa <  0) ? Fb : Fc; 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fc = tmp;
	    ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::fcmovge([' double tmp = (Fa >= 0) ? Fb : Fc;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fc = tmp;\n\t    '],{})

    Fault Fcmovge::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
Fc = xc->readFloatRegOperand(this, 2);
;
         double tmp = (Fa >= 0) ? Fb : Fc;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fc = tmp;
	    ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::fcmovle([' double tmp = (Fa <= 0) ? Fb : Fc;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fc = tmp;\n\t    '],{})

    Fault Fcmovle::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
Fc = xc->readFloatRegOperand(this, 2);
;
         double tmp = (Fa <= 0) ? Fb : Fc;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fc = tmp;
	    ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::fcmovgt([' double tmp = (Fa >  0) ? Fb : Fc; \n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fc = tmp;\n\t    '],{})

    Fault Fcmovgt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        double Fa = 0;
double Fb = 0;
double Fc = 0;
;
        Fa = xc->readFloatRegOperand(this, 0);
Fb = xc->readFloatRegOperand(this, 1);
Fc = xc->readFloatRegOperand(this, 2);
;
         double tmp = (Fa >  0) ? Fb : Fc; 
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fc = tmp;
	    ;

        if (fault == NoFault) {
            
        {
            double final_val = Fc;
            xc->setFloatRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperateWithNopCheck::mt_fpcr([' uint64_t tmp = Fa_uq;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    FPCR = tmp;\n\t    ', 'IsIprAccess'],{})

    Fault Mt_fpcr::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t Fa = 0;
uint64_t FPCR = 0;
;
        Fa = xc->readFloatRegOperandBits(this, 0);
;
         uint64_t tmp = Fa;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    FPCR = tmp;
	    ;

        if (fault == NoFault) {
            xc->setMiscRegOperand(this, 0, FPCR);
if (traceData) { traceData->setData(FPCR); };
        }

        return fault;
    }

// BasicOperateWithNopCheck::mf_fpcr([' uint64_t tmp = FPCR;\n\t    if(true)\n\t      fi_system->iew_fault(xc, xc->tcBase(),&tmp);\n\t    Fa_uq = tmp;\n\t    ', 'IsIprAccess'],{})

    Fault Mf_fpcr::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        fault = checkFpEnableFault(xc);;
        uint64_t FPCR = 0;
uint64_t Fa = 0;
;
        FPCR = xc->readMiscRegOperand(this, 0);
;
         uint64_t tmp = FPCR;
	    if(true)
	      fi_system->iew_fault(xc, xc->tcBase(),&tmp);
	    Fa = tmp;
	    ;

        if (fault == NoFault) {
            
        {
            uint64_t final_val = Fa;
            xc->setFloatRegOperandBits(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// WarnUnimpl::fetch([],{})

// WarnUnimpl::fetch_m([],{})

// WarnUnimpl::ecb([],{})

// MiscPrefetch::wh64([' EA = Rb & ~ULL(63); ', ' ; '],{'mem_flags': 'PREFETCH'})

    Fault Wh64::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA M5_VAR_USED;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb & ~ULL(63); ;

        warn_once("Prefetch instructions in Alpha do not do anything\n");
        if (fault == NoFault) {
             ; ;
        }

        return NoFault;
    }

    Fault Wh64::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = Rb & ~ULL(63); ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Wh64::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("initiateAcc undefined: Misc instruction does not support split "
             "access method!");
        return NoFault;
    }

    Fault Wh64::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        warn("completeAcc undefined: Misc instruction does not support split "
             "access method!");

        return NoFault;
    }

// BasicOperate::rpcc(['\n                /* Rb is a fake dependency so here is a fun way to get\n                 * the parser to understand that.\n                 */\n                uint64_t unused_var M5_VAR_USED = Rb;\n                Ra = FullSystem ? xc->readMiscReg(IPR_CC) : curTick();\n            ', 'IsUnverifiable'],{})

    Fault Rpcc::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
        
                /* Rb is a fake dependency so here is a fun way to get
                 * the parser to understand that.
                 */
                uint64_t unused_var M5_VAR_USED = Rb;
                Ra = FullSystem ? xc->readMiscReg(IPR_CC) : curTick();
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperate::trapb([' ', 'IsSerializing', 'IsSerializeBefore', 'No_OpClass'],{})

    Fault Trapb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
         ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::excb([' ', 'IsSerializing', 'IsSerializeBefore', 'No_OpClass'],{})

    Fault Excb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
         ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::mb([' ', 'IsMemBarrier', 'MemReadOp'],{})

    Fault Mb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
         ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::wmb([' ', 'IsWriteBarrier', 'MemWriteOp'],{})

    Fault Wmb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
         ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// FailUnimpl::rc_se(([], {}))

// BasicOperate::rc((['\n                Ra = IntrFlag;\n                IntrFlag = 0;\n            ', 'IsNonSpeculative', 'IsUnverifiable'], {}))

    Fault Rc::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t IntrFlag = 0;
;
        IntrFlag = xc->readMiscRegOperand(this, 0);
;
        
                Ra = IntrFlag;
                IntrFlag = 0;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }xc->setMiscRegOperand(this, 1, IntrFlag);
if (traceData) { traceData->setData(IntrFlag); };
        }

        return fault;
    }

// FailUnimpl::rs_se(([], {}))

// BasicOperate::rs((['\n                Ra = IntrFlag;\n                IntrFlag = 1;\n            ', 'IsNonSpeculative', 'IsUnverifiable'], {}))

    Fault Rs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t IntrFlag = 0;
;
        IntrFlag = xc->readMiscRegOperand(this, 0);
;
        
                Ra = IntrFlag;
                IntrFlag = 1;
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        }xc->setMiscRegOperand(this, 1, IntrFlag);
if (traceData) { traceData->setData(IntrFlag); };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// EmulatedCallPal::halt(['\n                    exitSimLoop("halt instruction encountered");\n                ', 'IsNonSpeculative'],{})

    Fault Halt::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    exitSimLoop("halt instruction encountered");
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// EmulatedCallPal::callsys(['\n                    xc->syscall(R0);\n                ', 'IsSerializeAfter', 'IsNonSpeculative', 'IsSyscall'],{})

    Fault Callsys::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R0 = 0;
;
        R0 = xc->readIntRegOperand(this, 0);
;
        
                    xc->syscall(R0);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// EmulatedCallPal::rduniq([' R0 = Runiq; ', 'IsIprAccess'],{})

    Fault Rduniq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R0 = 0;
uint64_t Runiq = 0;
;
        Runiq = xc->readMiscRegOperand(this, 0);
;
         R0 = Runiq; ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = R0;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// EmulatedCallPal::wruniq([' Runiq = R16; ', 'IsIprAccess'],{})

    Fault Wruniq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Runiq = 0;
uint64_t R16 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
;
         Runiq = R16; ;

        if (fault == NoFault) {
            xc->setMiscRegOperand(this, 0, Runiq);
if (traceData) { traceData->setData(Runiq); };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// CallPal::call_pal((['\n            if (!palValid ||\n                (palPriv\n                 && xc->readMiscReg(IPR_ICM) != mode_kernel)) {\n                // invalid pal function code, or attempt to do privileged\n                // PAL call in non-kernel mode\n                fault = new UnimplementedOpcodeFault;\n            } else {\n                // check to see if simulator wants to do something special\n                // on this PAL call (including maybe suppress it)\n                bool dopal = xc->simPalCheck(palFunc);\n\n                if (dopal) {\n                    xc->setMiscReg(IPR_EXC_ADDR, NPC);\n                    NPC = xc->readMiscReg(IPR_PAL_BASE) + palOffset;\n                }\n            }\n        ', 'IsNonSpeculative'], {}))

    Fault Call_pal::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t NPC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
NPC = __parserAutoPCState.npc();
;
        
            if (!palValid ||
                (palPriv
                 && xc->readMiscReg(IPR_ICM) != mode_kernel)) {
                // invalid pal function code, or attempt to do privileged
                // PAL call in non-kernel mode
                fault = new UnimplementedOpcodeFault;
            } else {
                // check to see if simulator wants to do something special
                // on this PAL call (including maybe suppress it)
                bool dopal = xc->simPalCheck(palFunc);

                if (dopal) {
                    xc->setMiscReg(IPR_EXC_ADDR, NPC);
                    NPC = xc->readMiscReg(IPR_PAL_BASE) + palOffset;
                }
            }
        ;

        if (fault == NoFault) {
            __parserAutoPCState.npc(NPC);
xc->pcState(__parserAutoPCState);
;
        }

        return fault;
    }

// OpcdecFault::hw_st_quad(([], {}))

// HwLoad::hw_ld([' EA = (Rb + disp) & ~3; ', ' Ra = Mem_ul; ', 'L', 'IsSerializing', 'IsSerializeBefore'],{})

    Fault Hw_ldL::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~3; ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Hw_ldL::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~3; ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Hw_ldL::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~3; ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Hw_ldL::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint32_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// HwLoad::hw_ld([' EA = (Rb + disp) & ~7; ', ' Ra = Mem_uq; ', 'Q', 'IsSerializing', 'IsSerializeBefore'],{})

    Fault Hw_ldQ::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~7; ;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

    Fault Hw_ldQ::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~7; ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Hw_ldQ::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Rb = xc->readIntRegOperand(this, 0);
;
         EA = (Rb + disp) & ~7; ;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }

    Fault Hw_ldQ::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Mem = 0;
;

        getMem(pkt, Mem, traceData);
	if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
        if (fault == NoFault) {
             Ra = Mem; ;
        }

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// OpcdecFault::hw_st_cond(([], {}))

// HwStore::hw_st([' EA = (Rb + disp) & ~3; ', ' Mem_ul = Ra<31:0>; ', 'L', 'IsSerializing', 'IsSerializeBefore'],{})

    Fault Hw_stL::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~3; ;

        if (fault == NoFault) {
             Mem = bits(Ra, 31, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Hw_stL::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~3; ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Hw_stL::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint32_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~3; ;

        if (fault == NoFault) {
             Mem = bits(Ra, 31, 0); ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Hw_stL::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// HwStore::hw_st([' EA = (Rb + disp) & ~7; ', ' Mem_uq = Ra_uq; ', 'Q', 'IsSerializing', 'IsSerializeBefore'],{})

    Fault Hw_stQ::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~7; ;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemAtomic(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        if (fault == NoFault) {
            ;
        }

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

    Fault Hw_stQ::eaComp(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Rb = 0;
;
        Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~7; ;

        if (fault == NoFault) {
            ;
            xc->setEA(EA);
        }

        return fault;
    }

    Fault Hw_stQ::initiateAcc(TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
uint64_t Rb = 0;
uint64_t Mem = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
Rb = xc->readIntRegOperand(this, 1);
;
         EA = (Rb + disp) & ~7; ;

        if (fault == NoFault) {
             Mem = Ra; ;
        }

        if (fault == NoFault) {
	  if(fi_system->fi_loadstore) Mem = fi_system->lds_fault(xc,xc->tcBase(),Mem);
            fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, NULL);
        }

        return fault;
    }

    Fault Hw_stQ::completeAcc(PacketPtr pkt,
                                      TimingSimpleCPU *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }

// Unknown::unknown(([], {}))

// FailUnimpl::hw_st_cond(([], {}))

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))

// OpcdecFault::hw_mfpr(([], {}))

// HwMoveIPR::hw_mfpr(['\n                int miscRegIndex = (ipr_index < MaxInternalProcRegs) ?\n                        IprToMiscRegIndex[ipr_index] : -1;\n                if(miscRegIndex < 0 || !IprIsReadable(miscRegIndex) ||\n                    miscRegIndex >= NumInternalProcRegs)\n                        fault = new UnimplementedOpcodeFault;\n                else\n                    Ra = xc->readMiscReg(miscRegIndex);\n            ', 'IsIprAccess'],{})

    Fault Hw_mfpr::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
;
        ;
        
                int miscRegIndex = (ipr_index < MaxInternalProcRegs) ?
                        IprToMiscRegIndex[ipr_index] : -1;
                if(miscRegIndex < 0 || !IprIsReadable(miscRegIndex) ||
                    miscRegIndex >= NumInternalProcRegs)
                        fault = new UnimplementedOpcodeFault;
                else
                    Ra = xc->readMiscReg(miscRegIndex);
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// OpcdecFault::hw_mtpr(([], {}))

// HwMoveIPR::hw_mtpr(['\n                int miscRegIndex = (ipr_index < MaxInternalProcRegs) ?\n                        IprToMiscRegIndex[ipr_index] : -1;\n                if(miscRegIndex < 0 || !IprIsWritable(miscRegIndex) ||\n                    miscRegIndex >= NumInternalProcRegs)\n                        fault = new UnimplementedOpcodeFault;\n                else\n                    xc->setMiscReg(miscRegIndex, Ra);\n                if (traceData) { traceData->setData(Ra); }\n            ', 'IsIprAccess'],{})

    Fault Hw_mtpr::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
;
        Ra = xc->readIntRegOperand(this, 0);
;
        
                int miscRegIndex = (ipr_index < MaxInternalProcRegs) ?
                        IprToMiscRegIndex[ipr_index] : -1;
                if(miscRegIndex < 0 || !IprIsWritable(miscRegIndex) ||
                    miscRegIndex >= NumInternalProcRegs)
                        fault = new UnimplementedOpcodeFault;
                else
                    xc->setMiscReg(miscRegIndex, Ra);
                if (traceData) { traceData->setData(Ra); }
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// OpcdecFault::hw_rei(([], {}))

// BasicOperate::hw_rei([' xc->hwrei(); ', 'IsSerializing', 'IsSerializeBefore'],{})

    Fault Hw_rei::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
         xc->hwrei(); ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// BasicOperate::arm(['\n                PseudoInst::arm(xc->tcBase());\n            ', 'IsNonSpeculative'],{})

    Fault Arm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                PseudoInst::arm(xc->tcBase());
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::quiesce(['\n\t      Interrupts* interrupts =   xc->tcBase()->getCpuPtr()->getInterruptController();\n\t\tif (interrupts->checkInterrupts(xc->tcBase())) {\n\t\t  PseudoInst::quiesceSkip(xc->tcBase());\n\t\t} else {\n\t\t  PseudoInst::quiesce(xc->tcBase());\n\t\t}\n\t\t  \n            ', 'IsNonSpeculative', 'IsQuiesce'],{})

    Fault Quiesce::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
	      Interrupts* interrupts =   xc->tcBase()->getCpuPtr()->getInterruptController();
		if (interrupts->checkInterrupts(xc->tcBase())) {
		  PseudoInst::quiesceSkip(xc->tcBase());
		} else {
		  PseudoInst::quiesce(xc->tcBase());
		}
		  
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::quiesceNs(['\n                PseudoInst::quiesceNs(xc->tcBase(), R16);\n            ', 'IsNonSpeculative', 'IsQuiesce'],{})

    Fault QuiesceNs::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
;
        
                PseudoInst::quiesceNs(xc->tcBase(), R16);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::quiesceCycles(['\n                PseudoInst::quiesceCycles(xc->tcBase(), R16);\n            ', 'IsNonSpeculative', 'IsQuiesce', 'IsUnverifiable'],{})

    Fault QuiesceCycles::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
;
        
                PseudoInst::quiesceCycles(xc->tcBase(), R16);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::quiesceTime(['\n                R0 = PseudoInst::quiesceTime(xc->tcBase());\n            ', 'IsNonSpeculative', 'IsUnverifiable'],{})

    Fault QuiesceTime::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R0 = 0;
;
        ;
        
                R0 = PseudoInst::quiesceTime(xc->tcBase());
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = R0;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperate::rpns(['\n                R0 = PseudoInst::rpns(xc->tcBase());\n            ', 'IsNonSpeculative', 'IsUnverifiable'],{})

    Fault Rpns::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R0 = 0;
;
        ;
        
                R0 = PseudoInst::rpns(xc->tcBase());
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = R0;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperate::wakeCPU(['\n                PseudoInst::wakeCPU(xc->tcBase(), R16);\n            ', 'IsNonSpeculative', 'IsUnverifiable'],{})

    Fault WakeCPU::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
;
        
                PseudoInst::wakeCPU(xc->tcBase(), R16);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::deprecated_ivlb(['\n                warn_once("Obsolete M5 ivlb instruction encountered.\\n");\n            '],{})

    Fault Deprecated_ivlb::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                warn_once("Obsolete M5 ivlb instruction encountered.\n");
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::deprecated_ivle(['\n                warn_once("Obsolete M5 ivlb instruction encountered.\\n");\n            '],{})

    Fault Deprecated_ivle::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                warn_once("Obsolete M5 ivlb instruction encountered.\n");
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::deprecated_exit(['\n                warn_once("deprecated M5 exit instruction encountered.\\n");\n                PseudoInst::m5exit(xc->tcBase(), 0);\n            ', 'No_OpClass', 'IsNonSpeculative'],{})

    Fault Deprecated_exit::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                warn_once("deprecated M5 exit instruction encountered.\n");
                PseudoInst::m5exit(xc->tcBase(), 0);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5exit(['\n                PseudoInst::m5exit(xc->tcBase(), R16);\n            ', 'No_OpClass', 'IsNonSpeculative'],{})

    Fault M5exit::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
;
        
                PseudoInst::m5exit(xc->tcBase(), R16);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::loadsymbol(['\n                PseudoInst::loadsymbol(xc->tcBase());\n            ', 'No_OpClass', 'IsNonSpeculative'],{})

    Fault Loadsymbol::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                PseudoInst::loadsymbol(xc->tcBase());
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::initparam(['\n                Ra = PseudoInst::initParam(xc->tcBase());\n            '],{})

    Fault Initparam::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t Ra = 0;
;
        ;
        
                Ra = PseudoInst::initParam(xc->tcBase());
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = Ra;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperate::resetstats(['\n                PseudoInst::resetstats(xc->tcBase(), R16, R17);\n            ', 'IsNonSpeculative'],{})

    Fault Resetstats::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
uint64_t R17 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
;
        
                PseudoInst::resetstats(xc->tcBase(), R16, R17);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::dumpstats(['\n                PseudoInst::dumpstats(xc->tcBase(), R16, R17);\n            ', 'IsNonSpeculative'],{})

    Fault Dumpstats::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
uint64_t R17 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
;
        
                PseudoInst::dumpstats(xc->tcBase(), R16, R17);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::dumpresetstats(['\n                PseudoInst::dumpresetstats(xc->tcBase(), R16, R17);\n            ', 'IsNonSpeculative'],{})

    Fault Dumpresetstats::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
uint64_t R17 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
;
        
                PseudoInst::dumpresetstats(xc->tcBase(), R16, R17);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5checkpoint(['\n                PseudoInst::m5checkpoint(xc->tcBase(), R16, R17);\n            ', 'IsNonSpeculative'],{})

    Fault M5checkpoint::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
uint64_t R17 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
;
        
                PseudoInst::m5checkpoint(xc->tcBase(), R16, R17);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5readfile(['\n                R0 = PseudoInst::readfile(xc->tcBase(), R16, R17, R18);\n            ', 'IsNonSpeculative'],{})

    Fault M5readfile::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R0 = 0;
uint64_t R16 = 0;
uint64_t R17 = 0;
uint64_t R18 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
R18 = xc->readIntRegOperand(this, 2);
;
        
                R0 = PseudoInst::readfile(xc->tcBase(), R16, R17, R18);
            ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = R0;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperate::m5break(['\n                PseudoInst::debugbreak(xc->tcBase());\n            ', 'IsNonSpeculative'],{})

    Fault M5break::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                PseudoInst::debugbreak(xc->tcBase());
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5switchcpu(['\n                PseudoInst::switchcpu(xc->tcBase());\n            ', 'IsNonSpeculative'],{})

    Fault M5switchcpu::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                PseudoInst::switchcpu(xc->tcBase());
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5addsymbol(['\n                PseudoInst::addsymbol(xc->tcBase(), R16, R17);\n            ', 'IsNonSpeculative'],{})

    Fault M5addsymbol::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
uint64_t R17 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
;
        
                PseudoInst::addsymbol(xc->tcBase(), R16, R17);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5panic(['\n                panic("M5 panic instruction called at pc = %#x.", PC);\n            ', 'IsNonSpeculative'],{})

    Fault M5panic::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t PC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
PC = __parserAutoPCState.pc();
;
        
                panic("M5 panic instruction called at pc = %#x.", PC);
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }
#define  CPANN(lbl) CPA::cpa()->lbl(xc->tcBase())

// BasicOperate::m5a_old(['\n                    panic("Deprecated M5 annotate instruction executed "\n                          "at pc = %#x\\n", PC);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_old::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t PC;
TheISA::PCState __parserAutoPCState;
;
        __parserAutoPCState = xc->pcState();
PC = __parserAutoPCState.pc();
;
        
                    panic("Deprecated M5 annotate instruction executed "
                          "at pc = %#x\n", PC);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_bsm(['\n                    CPANN(swSmBegin);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_bsm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swSmBegin);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_esm(['\n                    CPANN(swSmEnd);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_esm::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swSmEnd);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_begin(['\n                    CPANN(swExplictBegin);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_begin::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swExplictBegin);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_end(['\n                    CPANN(swEnd);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_end::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swEnd);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_q(['\n                    CPANN(swQ);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_q::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swQ);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_dq(['\n                    CPANN(swDq);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_dq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swDq);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_wf(['\n                    CPANN(swWf);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_wf::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swWf);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_we(['\n                    CPANN(swWe);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_we::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swWe);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_sq(['\n                    CPANN(swSq);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_sq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swSq);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_aq(['\n                    CPANN(swAq);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_aq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swAq);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_pq(['\n                    CPANN(swPq);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_pq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swPq);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_l(['\n                    CPANN(swLink);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_l::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swLink);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_identify(['\n                    CPANN(swIdentify);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_identify::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swIdentify);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_getid(['\n                    R0 = CPANN(swGetId);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_getid::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R0 = 0;
;
        ;
        
                    R0 = CPANN(swGetId);
                ;

        if (fault == NoFault) {
            
        
        {
            uint64_t final_val = R0;
            xc->setIntRegOperand(this, 0, final_val);

            if (traceData) { traceData->setData(final_val); }
        };
        }

        return fault;
    }

// BasicOperate::m5a_scl(['\n                    CPANN(swSyscallLink);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_scl::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swSyscallLink);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5a_rq(['\n                    CPANN(swRq);\n                ', 'IsNonSpeculative'],{})

    Fault M5a_rq::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                    CPANN(swRq);
                ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// Unknown::unknown(([], {}))
#undef CPANN

// BasicOperate::m5reserved2(['\n                warn("M5 reserved opcode ignored");\n            ', 'IsNonSpeculative'],{})

    Fault M5reserved2::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                warn("M5 reserved opcode ignored");
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::fi_activate_inst(['\n\t    PseudoInst::fi_activate_inst(xc->tcBase(),  R16, R17);\n\t\t      ', 'IsNonSpeculative'],{})

    Fault Fi_activate_inst::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
uint64_t R17 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
;
        
	    PseudoInst::fi_activate_inst(xc->tcBase(),  R16, R17);
		      ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::init_fi_system(['\n\t      PseudoInst::init_fi_system(xc->tcBase(), R16, R17);\n\t\t      ', 'IsNonSpeculative'],{})

    Fault Init_fi_system::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        uint64_t R16 = 0;
uint64_t R17 = 0;
;
        R16 = xc->readIntRegOperand(this, 0);
R17 = xc->readIntRegOperand(this, 1);
;
        
	      PseudoInst::init_fi_system(xc->tcBase(), R16, R17);
		      ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// BasicOperate::m5reserved5(['\n                warn("M5 reserved opcode ignored");\n            ', 'IsNonSpeculative'],{})

    Fault M5reserved5::execute(TimingSimpleCPU *xc,
                                  Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        ;
        ;
        ;
        
                warn("M5 reserved opcode ignored");
            ;

        if (fault == NoFault) {
            ;
        }

        return fault;
    }

// Unknown::unknown(([], {}))

// Unknown::unknown(([], {}))


} // namespace AlphaISAInst


